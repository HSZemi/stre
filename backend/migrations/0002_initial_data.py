# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2016-08-01 21:29
from __future__ import unicode_literals

from django.db import migrations
from django.contrib.auth.models import User
from django.contrib.auth.models import Group

def erstelle_statusse_briefvorlagen_aktionen_uebergaenge(apps, schema_editor):
	
	# STATUSSE #
	
	Status = apps.get_model("backend", "Status")
	
	s_antrag_gestellt = Status()
	s_antrag_gestellt.name = "Antrag gestellt"
	s_antrag_gestellt.klassen = "antrag_gestellt"
	s_antrag_gestellt.sort = 100
	s_antrag_gestellt.save()
	
	s_warte_auf_pruefung = Status()
	s_warte_auf_pruefung.name = "Warte auf Prüfung"
	s_warte_auf_pruefung.klassen = "warte_auf_pruefung"
	s_warte_auf_pruefung.sort = 110
	s_warte_auf_pruefung.save()
	
	s_unterlagen_nachgefordert = Status()
	s_unterlagen_nachgefordert.name = "Unterlagen nachgefordert"
	s_unterlagen_nachgefordert.klassen = "unterlagen_nachgefordert"
	s_unterlagen_nachgefordert.sort = 200
	s_unterlagen_nachgefordert.save()
	
	s_warte_auf_pruefung2 = Status()
	s_warte_auf_pruefung2.name = "Warte auf Prüfung II"
	s_warte_auf_pruefung2.klassen = "warte_auf_pruefung2"
	s_warte_auf_pruefung2.sort = 210
	s_warte_auf_pruefung2.save()
	
	s_erneut_unterlagen_nachgefordert = Status()
	s_erneut_unterlagen_nachgefordert.name = "erneut Unterlagen nachgefordert"
	s_erneut_unterlagen_nachgefordert.klassen = "erneut_unterlagen_nachgefordert"
	s_erneut_unterlagen_nachgefordert.sort = 300
	s_erneut_unterlagen_nachgefordert.save()
	
	s_warte_auf_pruefung3 = Status()
	s_warte_auf_pruefung3.name = "Warte auf Prüfung III"
	s_warte_auf_pruefung3.klassen = "warte_auf_pruefung3"
	s_warte_auf_pruefung3.sort = 310
	s_warte_auf_pruefung3.save()
	
	s_vollstaendig = Status()
	s_vollstaendig.name = "Vollständig"
	s_vollstaendig.klassen = "vollstaendig"
	s_vollstaendig.sort = 400
	s_vollstaendig.save()
	
	s_nicht_vollstaendig = Status()
	s_nicht_vollstaendig.name = "nicht Vollständig"
	s_nicht_vollstaendig.klassen = "vollstaendig"
	s_nicht_vollstaendig.sort = 410
	s_nicht_vollstaendig.save()
	s_vollstaendig.save()
	
	s_genehmigt = Status()
	s_genehmigt.name = "Genehmigt"
	s_genehmigt.klassen = "genehmigt"
	s_genehmigt.sort = 500
	s_genehmigt.save()
	
	s_teilweise_genehmigt = Status()
	s_teilweise_genehmigt.name = "teilweise Genehmigt"
	s_teilweise_genehmigt.klassen = "teilweise_genehmigt"
	s_teilweise_genehmigt.sort = 510
	s_teilweise_genehmigt.save()
	
	s_abgelehnt = Status()
	s_abgelehnt.name = "Abgelehnt"
	s_abgelehnt.klassen = "abgelehnt"
	s_abgelehnt.sort = 520
	s_abgelehnt.save()
	
	s_ueberwiesen = Status()
	s_ueberwiesen.name = "Überwiesen"
	s_ueberwiesen.klassen = "ueberwiesen"
	s_ueberwiesen.sort = 600
	s_ueberwiesen.save()
	
	s_zurueckgezogen = Status()
	s_zurueckgezogen.name = "Zurückgezogen"
	s_zurueckgezogen.klassen = "zurueckgezogen"
	s_zurueckgezogen.sort = 700
	s_zurueckgezogen.save()
	
	
	# BRIEFVORLAGEN #

	Briefvorlage = apps.get_model("backend", "Briefvorlage")
	
	b_nachforderung = Briefvorlage()
	b_nachforderung.name = "Nachforderung"
	b_nachforderung.betreff = "Dein Antrag auf Semesterticketrückerstattung - Nr. FALLNUMMER"
	b_nachforderung.anrede = "Hallo VORNAME NACHNAME!"
	b_nachforderung.brieftext = r"""Du hast am ANTRAGSDATUM einen Antrag auf Semesterticketrückerstattung gestellt.

Leider fehlen noch folgende Nachweise und Dokumente von dir:

LISTE-FEHLENDE-NACHWEISE-UND-DOKUMENTE

Bitte lade sie bis zum folgenden Zeitpunkt hoch: NACHFRIST1-DATUM

Vielen Dank\\
Dein Ausschuss für das Semesterticket"""
	b_nachforderung.status = s_unterlagen_nachgefordert
	b_nachforderung.hat_nachweise = True
	b_nachforderung.hat_begruendung = False
	b_nachforderung.hat_freitext = True
	b_nachforderung.sort = 100
	b_nachforderung.save()
	
	b_erneute_nachforderung = Briefvorlage()
	b_erneute_nachforderung.name = "erneute Nachforderung"
	b_erneute_nachforderung.betreff = "Dein Antrag auf Semesterticketrückerstattung - Nr. FALLNUMMER"
	b_erneute_nachforderung.anrede = "Hallo VORNAME NACHNAME!"
	b_erneute_nachforderung.brieftext = r"""Du hast am ANTRAGSDATUM einen Antrag auf Semesterticketrückerstattung gestellt.

Am NACHFRIST1-BRIEFDATUM haben wir dich gebeten, bis zum NACHFRIST1-DATUM einige Nachweise und Dokumente nachzureichen.

Leider fehlen immer noch folgende Nachweise und Dokumente von dir:

LISTE-FEHLENDE-NACHWEISE-UND-DOKUMENTE

Bitte lade sie bis zum folgenden Zeitpunkt hoch: NACHFRIST2-DATUM. Andernfalls muss dein Antrag wegen Unvollständigkeit abgelehnt werden.

Vielen Dank\\
Dein Ausschuss für das Semesterticket"""
	b_erneute_nachforderung.status = s_erneut_unterlagen_nachgefordert
	b_erneute_nachforderung.hat_nachweise = True
	b_erneute_nachforderung.hat_begruendung = False
	b_erneute_nachforderung.hat_freitext = True
	b_erneute_nachforderung.sort = 200
	b_erneute_nachforderung.save()
	
	b_genehmigung = Briefvorlage()
	b_genehmigung.name = "Genehmigung"
	b_genehmigung.betreff = "Bescheid zum Antrag auf Semesterticketrückerstattung  - Nr. FALLNUMMER"
	b_genehmigung.anrede = "Hallo VORNAME NACHNAME!"
	b_genehmigung.brieftext = r"""bezüglich Deines Antrags vom ANTRAGSDATUM wurde auf Grundlage der geltenden Richtlinie für die Arbeit des Ausschusses 
für das Semesterticket folgender Beschluss gefasst:

\textbf{Der Mobilitätsbeitrag für das SEMESTER wird dir in Höhe von 
\EUR{ENDBETRAG} erstattet.}

Die beigefügte Rechtsbehelfsbelehrung ist Bestandteil dieses Bescheides.

\textbf{Begründung:}\\

Dein Antrag erfüllt alle Voraussetzungen nach der geltenden Richtlinie.

FREITEXT

Der Betrag wird auf das bei der Antragstellung angegebene Bankkonto überwiesen.

\thispagestyle{ersteSeite}

\closing{Mit freundlichen Grüßen}

\begin{scriptsize}

        Dieser Ausdruck wurde maschinell erstellt und ist auch ohne Unterschrift gültig.
        \begin{singlespace}
                \textbf{RECHTSBEHELFSBELEHRUNG}\\
                Gegen diesen Bescheid kann innerhalb eines Monats nach seiner Bekanntgabe Klage beim Verwaltungsgericht Köln, Appellhofplatz, 50667 Köln, schriftlich, 
                zur Niederschrift des Urkundsbeamten der Geschäftsstelle oder in elektronischer Form nach Maßgabe der Verordnung über den elektronischen Rechtsverkehr 
                bei den Verwaltungsgerichten und den Finanzgerichten im Lande Nordrhein-Westfalen (Elektronische Rechtsverkehrsverordnung Verwaltungs- und Finanzgerichte 
                – ERVVO VG/FG – vom 7. November 2012, GV. NRW. S. 548) erhoben werden. Die Klage muss den Kläger, den Beklagten und den Gegenstand des Klagebegehrens 
                bezeichnen und soll einen bestimmten Antrag enthalten. Die zur Begründung dienenden Tatsachen oder Beweismittel sollen angegeben werden, der angefochtene 
                Bescheid soll in Urschrift oder in Abschrift beigefügt werden. Der Klage sollen Abschriften für die übrigen Beteiligten beigefügt werden. Im Fall der 
                elektronischen Klageerhebung nach Maßgabe der ERVVO VG/FG bedarf es keiner Abschriften.
        \end{singlespace}
\end{scriptsize}"""
	b_genehmigung.status = s_genehmigt
	b_genehmigung.hat_nachweise = False
	b_genehmigung.hat_begruendung = False
	b_genehmigung.hat_freitext = True
	b_genehmigung.sort = 300
	b_genehmigung.save()
	
	b_teilweise_genehmigung = Briefvorlage()
	b_teilweise_genehmigung.name = "teilweise Genehmigung"
	b_teilweise_genehmigung.betreff = "Bescheid zum Antrag auf Semesterticketrückerstattung  - Nr. FALLNUMMER"
	b_teilweise_genehmigung.anrede = "Hallo VORNAME NACHNAME!"
	b_teilweise_genehmigung.brieftext = r"""bezüglich Deines Antrags vom ANTRAGSDATUM wurde auf Grundlage der geltenden Richtlinie für die Arbeit des Ausschusses 
für das Semesterticket folgender Beschluss gefasst:

\textbf{Der Mobilitätsbeitrag für das SEMESTER wird dir teilweise, in Höhe von 
\EUR{ENDBETRAG}, erstattet.}

{Die genaue Erläuterung hierzu findest Du in der Begründung.}

Die beigefügte Rechtsbehelfsbelehrung ist Bestandteil dieses Bescheides.

\textbf{Begründung:}\\

FREITEXT

Der Betrag wird auf das bei der Antragstellung angegebene Bankkonto überwiesen.

\thispagestyle{ersteSeite}

\closing{Mit freundlichen Grüßen}

\begin{scriptsize}

        Dieser Ausdruck wurde maschinell erstellt und ist auch ohne Unterschrift gültig.
        \begin{singlespace}
                \textbf{RECHTSBEHELFSBELEHRUNG}\\
                Gegen diesen Bescheid kann innerhalb eines Monats nach seiner Bekanntgabe Klage beim Verwaltungsgericht Köln, Appellhofplatz, 50667 Köln, schriftlich, 
                zur Niederschrift des Urkundsbeamten der Geschäftsstelle oder in elektronischer Form nach Maßgabe der Verordnung über den elektronischen Rechtsverkehr 
                bei den Verwaltungsgerichten und den Finanzgerichten im Lande Nordrhein-Westfalen (Elektronische Rechtsverkehrsverordnung Verwaltungs- und Finanzgerichte 
                – ERVVO VG/FG – vom 7. November 2012, GV. NRW. S. 548) erhoben werden. Die Klage muss den Kläger, den Beklagten und den Gegenstand des Klagebegehrens 
                bezeichnen und soll einen bestimmten Antrag enthalten. Die zur Begründung dienenden Tatsachen oder Beweismittel sollen angegeben werden, der angefochtene 
                Bescheid soll in Urschrift oder in Abschrift beigefügt werden. Der Klage sollen Abschriften für die übrigen Beteiligten beigefügt werden. Im Fall der 
                elektronischen Klageerhebung nach Maßgabe der ERVVO VG/FG bedarf es keiner Abschriften.
        \end{singlespace}
\end{scriptsize}"""
	b_teilweise_genehmigung.status = s_teilweise_genehmigt
	b_teilweise_genehmigung.hat_nachweise = False
	b_teilweise_genehmigung.hat_begruendung = False
	b_teilweise_genehmigung.hat_freitext = True
	b_teilweise_genehmigung.sort = 310
	b_teilweise_genehmigung.save()
	
	b_ablehnung = Briefvorlage()
	b_ablehnung.name = "Ablehnung"
	b_ablehnung.betreff = "Bescheid zum Antrag auf Semesterticketrückerstattung  - Nr. FALLNUMMER"
	b_ablehnung.anrede = "Hallo VORNAME NACHNAME!"
	b_ablehnung.brieftext = r"""bezüglich Deines Antrags vom ANTRAGSDATUM wurde auf Grundlage der geltenden Richtlinie für die Arbeit des Ausschusses für das Semesterticket wird folgender Beschluss gefasst:

\textbf{Der Mobilitätsbeitrag für das SEMESTER wird Dir nicht erstattet.}\\
Die beigefügte Rechtsbehelfsbelehrung ist Bestandteil dieses Bescheides.

\textbf{Begründung:}\\
BEGRUENDUNG

FREITEXT

\thispagestyle{ersteSeite}

\closing{Mit freundlichen Grüßen}

\begin{scriptsize}

Dieser Ausdruck wurde maschinell erstellt und ist auch ohne Unterschrift gültig.
\begin{singlespace}

\textbf{Hinweise:} Durch die Bürokratieabbaugesetze I und II ist das einer Klage bisher vorgeschaltete Widerspruchsverfahren abgeschafft worden. Zur Vermeidung unnötiger Kosten empfehlen wir Ihnen, sich zunächst mit uns in Verbindungen zu setzen. In vielen Fällen können so eventuelle Unklarheiten bereits im Vorfeld einer Klage geklärt werden. Die Klagefrist von einem Monat wird durch diese Verfahrensweise jedoch nicht verlängert.\\
Es sei auch auf den Ältestenrat der verfassten Studierendenschaft an der Rheinischen Friedrich-Wilhelms-Universität verwiesen. Er ist das oberste streitschlichtende Gremium dieser. Er schlichtet für antragsstellende Studierende kostenfrei bei Unstimmigkeiten mit Gremien der verfassten Studierendenschaft. Der Ältestenrat ist erreichbar unter aeltestenrat@asta.uni-bonn.de. Die Klagefristen bleiben von einer eventuellen Anrufung unberührt.\\

\noindent\rule{\textwidth}{1pt}
\textbf{RECHTSBEHELFSBELEHRUNG}\\
Gegen diesen Bescheid kann innerhalb eines Monats nach seiner Bekanntgabe Klage beim Verwaltungsgericht Köln, Appellhofplatz, 50667 Köln, schriftlich, zur Niederschrift des Urkundsbeamten der Geschäftsstelle oder in elektronischer Form nach Maßgabe der Verordnung über den elektronischen Rechtsverkehr bei den Verwaltungsgerichten und den Finanzanzgerichten im Lande Nordrhein-Westfalen (Elektronische Rechtsverkehrsverordnung Verwaltungs- und Finanzgerichte – ERVVO VG/FG – vom 7. November 2012, GV. NRW. S. 548) erhoben werden. Die Klage muss den Kläger, den Beklagten und den Gegenstand des Klagebegehrens bezeichnen und soll einen bestimmten Antrag enthalten. Die zur Begründung dienenden Tatsachen oder Beweismittel sollen angegeben werden, der angefochtene Bescheid soll in Urschrift oder in Abschrift beigefügt werden. Der Klage sollen Abschriften für die übrigen Beteiligten beigefügt werden. Im Fall der elektronischen Klageerhebung nach Maßgabe der ERVVO VG/FG bedarf es keiner Abschriften.
\end{singlespace}
\end{scriptsize}"""
	b_ablehnung.status = s_abgelehnt
	b_ablehnung.hat_nachweise = False
	b_ablehnung.hat_begruendung = True
	b_ablehnung.hat_freitext = True
	b_ablehnung.sort = 320
	b_ablehnung.save()
	
	
	
	# AKTIONEN #
	
	Aktion = apps.get_model("backend", "Aktion")
	
	a_antrag_stellen = Aktion()
	a_antrag_stellen.name = "Antrag stellen"
	a_antrag_stellen.user_explizit = False
	a_antrag_stellen.staff_explizit = False
	a_antrag_stellen.setzt_ueberweisungsbetrag = False
	a_antrag_stellen.setzt_nachfrist1 = False
	a_antrag_stellen.setzt_nachfrist2 = False
	a_antrag_stellen.sort = 100
	a_antrag_stellen.briefvorlage = None
	a_antrag_stellen.save()
	
	a_dokument_hochladen = Aktion()
	a_dokument_hochladen.name = "Dokument hochladen"
	a_dokument_hochladen.user_explizit = False
	a_dokument_hochladen.staff_explizit = False
	a_dokument_hochladen.setzt_ueberweisungsbetrag = False
	a_dokument_hochladen.setzt_nachfrist1 = False
	a_dokument_hochladen.setzt_nachfrist2 = False
	a_dokument_hochladen.sort = 200
	a_dokument_hochladen.briefvorlage = None
	a_dokument_hochladen.save()
	
	a_unterlagen_nachfordern = Aktion()
	a_unterlagen_nachfordern.name = "Unterlagen nachfordern"
	a_unterlagen_nachfordern.user_explizit = False
	a_unterlagen_nachfordern.staff_explizit = True
	a_unterlagen_nachfordern.setzt_ueberweisungsbetrag = False
	a_unterlagen_nachfordern.setzt_nachfrist1 = True
	a_unterlagen_nachfordern.setzt_nachfrist2 = False
	a_unterlagen_nachfordern.sort = 300
	a_unterlagen_nachfordern.briefvorlage = b_nachforderung
	a_unterlagen_nachfordern.save()
	
	a_erneut_unterlagen_nachfordern = Aktion()
	a_erneut_unterlagen_nachfordern.name = "erneut Unterlagen nachfordern"
	a_erneut_unterlagen_nachfordern.user_explizit = False
	a_erneut_unterlagen_nachfordern.staff_explizit = True
	a_erneut_unterlagen_nachfordern.setzt_ueberweisungsbetrag = False
	a_erneut_unterlagen_nachfordern.setzt_nachfrist1 = False
	a_erneut_unterlagen_nachfordern.setzt_nachfrist2 = True
	a_erneut_unterlagen_nachfordern.sort = 400
	a_erneut_unterlagen_nachfordern.briefvorlage = b_erneute_nachforderung
	a_erneut_unterlagen_nachfordern.save()
	
	a_als_vollstaendig_markieren = Aktion()
	a_als_vollstaendig_markieren.name = "als vollständig markieren"
	a_als_vollstaendig_markieren.user_explizit = False
	a_als_vollstaendig_markieren.staff_explizit = True
	a_als_vollstaendig_markieren.setzt_ueberweisungsbetrag = False
	a_als_vollstaendig_markieren.setzt_nachfrist1 = False
	a_als_vollstaendig_markieren.setzt_nachfrist2 = False
	a_als_vollstaendig_markieren.sort = 500
	a_als_vollstaendig_markieren.briefvorlage = None
	a_als_vollstaendig_markieren.save()
	
	a_als_nicht_vollstaendig_markieren = Aktion()
	a_als_nicht_vollstaendig_markieren.name = "als nicht vollständig markieren"
	a_als_nicht_vollstaendig_markieren.user_explizit = False
	a_als_nicht_vollstaendig_markieren.staff_explizit = True
	a_als_nicht_vollstaendig_markieren.setzt_ueberweisungsbetrag = False
	a_als_nicht_vollstaendig_markieren.setzt_nachfrist1 = False
	a_als_nicht_vollstaendig_markieren.setzt_nachfrist2 = False
	a_als_nicht_vollstaendig_markieren.sort = 600
	a_als_nicht_vollstaendig_markieren.briefvorlage = None
	a_als_nicht_vollstaendig_markieren.save()
	
	a_genehmigen = Aktion()
	a_genehmigen.name = "Antrag genehmigen"
	a_genehmigen.user_explizit = False
	a_genehmigen.staff_explizit = True
	a_genehmigen.setzt_ueberweisungsbetrag = False
	a_genehmigen.setzt_nachfrist1 = False
	a_genehmigen.setzt_nachfrist2 = False
	a_genehmigen.sort = 700
	a_genehmigen.briefvorlage = b_genehmigung
	a_genehmigen.save()
	
	a_teilweise_genehmigen = Aktion()
	a_teilweise_genehmigen.name = "Antrag teilweise genehmigen"
	a_teilweise_genehmigen.user_explizit = False
	a_teilweise_genehmigen.staff_explizit = True
	a_teilweise_genehmigen.setzt_ueberweisungsbetrag = True
	a_teilweise_genehmigen.setzt_nachfrist1 = False
	a_teilweise_genehmigen.setzt_nachfrist2 = False
	a_teilweise_genehmigen.sort = 710
	a_teilweise_genehmigen.briefvorlage = b_teilweise_genehmigung
	a_teilweise_genehmigen.save()
	
	a_ablehnen = Aktion()
	a_ablehnen.name = "Antrag ablehnen"
	a_ablehnen.user_explizit = False
	a_ablehnen.staff_explizit = True
	a_ablehnen.setzt_ueberweisungsbetrag = False
	a_ablehnen.setzt_nachfrist1 = False
	a_ablehnen.setzt_nachfrist2 = False
	a_ablehnen.sort = 720
	a_ablehnen.briefvorlage = b_ablehnung
	a_ablehnen.save()
	
	a_als_ueberwiesen_markieren= Aktion()
	a_als_ueberwiesen_markieren.name = "als überwiesen markieren"
	a_als_ueberwiesen_markieren.user_explizit = False
	a_als_ueberwiesen_markieren.staff_explizit = True
	a_als_ueberwiesen_markieren.setzt_ueberweisungsbetrag = False
	a_als_ueberwiesen_markieren.setzt_nachfrist1 = False
	a_als_ueberwiesen_markieren.setzt_nachfrist2 = False
	a_als_ueberwiesen_markieren.sort = 800
	a_als_ueberwiesen_markieren.briefvorlage = None
	a_als_ueberwiesen_markieren.save()
	
	a_zurueckziehen = Aktion()
	a_zurueckziehen.name = "Antrag zurückziehen"
	a_zurueckziehen.user_explizit = True
	a_zurueckziehen.staff_explizit = False
	a_zurueckziehen.setzt_ueberweisungsbetrag = False
	a_zurueckziehen.setzt_nachfrist1 = False
	a_zurueckziehen.setzt_nachfrist2 = False
	a_zurueckziehen.sort = 900
	a_zurueckziehen.briefvorlage = None
	a_zurueckziehen.save()
	
	
	# ÜBERGÄNGE #
	
	Uebergang = apps.get_model("backend", "Uebergang")
	
	u_ag_ag = Uebergang()
	u_ag_ag.aktion = a_antrag_stellen
	u_ag_ag.status_start = s_antrag_gestellt
	u_ag_ag.status_end = s_antrag_gestellt
	u_ag_ag.save()
	
	u_ag_wp = Uebergang()
	u_ag_wp.aktion = a_dokument_hochladen
	u_ag_wp.status_start = s_antrag_gestellt
	u_ag_wp.status_end = s_warte_auf_pruefung
	u_ag_wp.save()
	
	u_ag_un = Uebergang()
	u_ag_un.aktion = a_unterlagen_nachfordern
	u_ag_un.status_start = s_antrag_gestellt
	u_ag_un.status_end = s_unterlagen_nachgefordert
	u_ag_un.save()
	
	u_ag_av = Uebergang()
	u_ag_av.aktion = a_als_vollstaendig_markieren
	u_ag_av.status_start = s_antrag_gestellt
	u_ag_av.status_end = s_vollstaendig
	u_ag_av.save()
	
	u_ag_zg = Uebergang()
	u_ag_zg.aktion = a_zurueckziehen
	u_ag_zg.status_start = s_antrag_gestellt
	u_ag_zg.status_end = s_zurueckgezogen
	u_ag_zg.save()
	
	u_wp_wp = Uebergang()
	u_wp_wp.aktion = a_dokument_hochladen
	u_wp_wp.status_start = s_warte_auf_pruefung
	u_wp_wp.status_end = s_warte_auf_pruefung
	u_wp_wp.save()
	
	u_wp_av = Uebergang()
	u_wp_av.aktion = a_als_vollstaendig_markieren
	u_wp_av.status_start = s_warte_auf_pruefung
	u_wp_av.status_end = s_vollstaendig
	u_wp_av.save()
	
	u_wp_un = Uebergang()
	u_wp_un.aktion = a_unterlagen_nachfordern
	u_wp_un.status_start = s_warte_auf_pruefung
	u_wp_un.status_end = s_unterlagen_nachgefordert
	u_wp_un.save()
	
	u_wp_zg = Uebergang()
	u_wp_zg.aktion = a_zurueckziehen
	u_wp_zg.status_start = s_warte_auf_pruefung
	u_wp_zg.status_end = s_zurueckgezogen
	u_wp_zg.save()
	
	u_un_av = Uebergang()
	u_un_av.aktion = a_als_vollstaendig_markieren
	u_un_av.status_start = s_unterlagen_nachgefordert
	u_un_av.status_end = s_vollstaendig
	u_un_av.save()
	
	u_un_en = Uebergang()
	u_un_en.aktion = a_erneut_unterlagen_nachfordern
	u_un_en.status_start = s_unterlagen_nachgefordert
	u_un_en.status_end = s_erneut_unterlagen_nachgefordert
	u_un_en.save()
	
	u_un_wp2 = Uebergang()
	u_un_wp2.aktion = a_dokument_hochladen
	u_un_wp2.status_start = s_unterlagen_nachgefordert
	u_un_wp2.status_end = s_warte_auf_pruefung2
	u_un_wp2.save()
	
	u_un_zg = Uebergang()
	u_un_zg.aktion = a_zurueckziehen
	u_un_zg.status_start = s_unterlagen_nachgefordert
	u_un_zg.status_end = s_zurueckgezogen
	u_un_zg.save()
	
	u_wp2_wp2 = Uebergang()
	u_wp2_wp2.aktion = a_dokument_hochladen
	u_wp2_wp2.status_start = s_warte_auf_pruefung2
	u_wp2_wp2.status_end = s_warte_auf_pruefung2
	u_wp2_wp2.save()
	
	u_wp2_av = Uebergang()
	u_wp2_av.aktion = a_als_vollstaendig_markieren
	u_wp2_av.status_start = s_warte_auf_pruefung2
	u_wp2_av.status_end = s_vollstaendig
	u_wp2_av.save()
	
	u_wp2_en = Uebergang()
	u_wp2_en.aktion = a_erneut_unterlagen_nachfordern
	u_wp2_en.status_start = s_warte_auf_pruefung2
	u_wp2_en.status_end = s_erneut_unterlagen_nachgefordert
	u_wp2_en.save()
	
	u_wp2_zg = Uebergang()
	u_wp2_zg.aktion = a_zurueckziehen
	u_wp2_zg.status_start = s_warte_auf_pruefung2
	u_wp2_zg.status_end = s_zurueckgezogen
	u_wp2_zg.save()
	
	u_en_av = Uebergang()
	u_en_av.aktion = a_als_vollstaendig_markieren
	u_en_av.status_start = s_erneut_unterlagen_nachgefordert
	u_en_av.status_end = s_vollstaendig
	u_en_av.save()
	
	u_en_nv = Uebergang()
	u_en_nv.aktion = a_als_nicht_vollstaendig_markieren
	u_en_nv.status_start = s_erneut_unterlagen_nachgefordert
	u_en_nv.status_end = s_nicht_vollstaendig
	u_en_nv.save()
	
	u_en_wp3 = Uebergang()
	u_en_wp3.aktion = a_dokument_hochladen
	u_en_wp3.status_start = s_erneut_unterlagen_nachgefordert
	u_en_wp3.status_end = s_warte_auf_pruefung3
	u_en_wp3.save()
	
	u_en_zg = Uebergang()
	u_en_zg.aktion = a_zurueckziehen
	u_en_zg.status_start = s_erneut_unterlagen_nachgefordert
	u_en_zg.status_end = s_zurueckgezogen
	u_en_zg.save()
	
	u_wp3_wp3 = Uebergang()
	u_wp3_wp3.aktion = a_dokument_hochladen
	u_wp3_wp3.status_start = s_warte_auf_pruefung3
	u_wp3_wp3.status_end = s_warte_auf_pruefung3
	u_wp3_wp3.save()
	
	u_wp3_av = Uebergang()
	u_wp3_av.aktion = a_als_vollstaendig_markieren
	u_wp3_av.status_start = s_warte_auf_pruefung3
	u_wp3_av.status_end = s_vollstaendig
	u_wp3_av.save()
	
	u_wp3_nv = Uebergang()
	u_wp3_nv.aktion = a_als_nicht_vollstaendig_markieren
	u_wp3_nv.status_start = s_warte_auf_pruefung3
	u_wp3_nv.status_end = s_nicht_vollstaendig
	u_wp3_nv.save()
	
	u_wp3_zg = Uebergang()
	u_wp3_zg.aktion = a_zurueckziehen
	u_wp3_zg.status_start = s_warte_auf_pruefung3
	u_wp3_zg.status_end = s_zurueckgezogen
	u_wp3_zg.save()
	
	u_av_tg = Uebergang()
	u_av_tg.aktion = a_teilweise_genehmigen
	u_av_tg.status_start = s_vollstaendig
	u_av_tg.status_end = s_teilweise_genehmigt
	u_av_tg.save()
	
	u_av_g = Uebergang()
	u_av_g.aktion = a_genehmigen
	u_av_g.status_start = s_vollstaendig
	u_av_g.status_end = s_genehmigt
	u_av_g.save()
	
	u_av_a = Uebergang()
	u_av_a.aktion = a_ablehnen
	u_av_a.status_start = s_vollstaendig
	u_av_a.status_end = s_abgelehnt
	u_av_a.save()
	
	u_av_zg = Uebergang()
	u_av_zg.aktion = a_zurueckziehen
	u_av_zg.status_start = s_vollstaendig
	u_av_zg.status_end = s_zurueckgezogen
	u_av_zg.save()
	
	u_nv_a = Uebergang()
	u_nv_a.aktion = a_ablehnen
	u_nv_a.status_start = s_nicht_vollstaendig
	u_nv_a.status_end = s_abgelehnt
	u_nv_a.save()
	
	u_nv_zg = Uebergang()
	u_nv_zg.aktion = a_zurueckziehen
	u_nv_zg.status_start = s_nicht_vollstaendig
	u_nv_zg.status_end = s_zurueckgezogen
	u_nv_zg.save()
	
	u_tg_uw = Uebergang()
	u_tg_uw.aktion = a_als_ueberwiesen_markieren
	u_tg_uw.status_start = s_teilweise_genehmigt
	u_tg_uw.status_end = s_ueberwiesen
	u_tg_uw.save()
	
	u_g_uw = Uebergang()
	u_ag_ag.aktion = a_als_ueberwiesen_markieren
	u_ag_ag.status_start = s_genehmigt
	u_ag_ag.status_end = s_ueberwiesen
	u_ag_ag.save()
	
	
	# GLOBALSETTINGS #
	
	GlobalSettings = apps.get_model("backend", "GlobalSettings")
	
	gs = GlobalSettings()
	gs.status_start = s_antrag_gestellt
	gs.aktion_antrag_stellen = a_antrag_stellen
	gs.aktion_hochladen = a_dokument_hochladen
	gs.aktion_zurueckziehen = a_zurueckziehen
	gs.brief_tex = r"""\documentclass[
fontsize=12pt,
paper=a4,
enlargefirstpage=off,
parskip=half*,
ngerman]{scrlttr2}

%% Kodierungspakete
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[ngerman,russian]{babel}
\usepackage{lmodern}
\usepackage[babel,german=quotes]{csquotes}

\usepackage{graphicx}
\usepackage{geometry, wrapfig}
\usepackage{float}
\usepackage{color}
\usepackage{lipsum}
\usepackage{lastpage}
\usepackage{ccicons}
\usepackage{eurosym}
\usepackage{ifthen}
\usepackage{fancyhdr}

\setkomavar{signature}{i.A. Karima Badr}
\setkomavar{fromname}{Ausschuss für das Semesterticket}
\setkomavar{fromaddress}{Nassestraße 11}
\setkomavar{backaddress}{Ausschuss f. d. Semesterticket}
\setkomavar{backaddressseparator}{ $\cdot$ }
\setkomavar{place}{Bonn}

\author{Daniel Dejcman}
\newcommand{\datum}{BRIEFDATUM}
\newcommand{\betreffKurz}{Bescheid}

%% Format
\geometry{a4paper, left=30mm, right=30mm, top=30mm, bottom=35mm}
\usepackage[onehalfspacing]{setspace} % der Standard für 1.5-fachen Zeilenabstand. \linespread ist der Vergrößerungsfaktor mit dem der Standardwert (bei 10pt -> 1.2) multipliziert wird.x
\pagestyle{fancy}
%% Typografisch empfehlenswerte Pakete
\usepackage{ 
        ellipsis,  % Korrigiert den Weißraum um Auslassungspunkte
        ragged2e,  % Ermöglicht Flattersatz mit Silbentrennung
        marginnote   % Für bessere Randnotizen mit \marginnote statt \marginline
}
%% sowie Micotype 
\usepackage[protrusion=true,expansion=true,tracking=true,kerning=true,final]{microtype}
\SetTracking{encoding={*}, shape=sc}{30}

\begin{document}
\fancyhead{}
\fancyfoot{}

\renewcommand{\headrulewidth}{0.2pt}
\renewcommand{\footrulewidth}{0.2pt}
\fancyfootoffset{0.3\marginparwidth}
\fancyheadoffset{0.3\marginparwidth}

\firsthead{\hspace*{-57pt}\makebox[\textwidth][l]{\raisebox{0pt}[3.60cm]{\includegraphics[width=210mm]{briefkopf}}}}

\fancyhead[OR,ER]{\scriptsize \datum{}}
\fancyhead[OC,EC]{\scriptsize Seite \thepage\ von \pageref{LastPage}}
\fancyhead[OL,EL]{\scriptsize \textit{\betreffKurz}}

\fancyfoot[OC,EC]{
        \scriptsize
        \begin{tabular}{lr@{}}
                \begin{tabular}{@{}l@{}l@{}l@{}l@{}}
                        Tel.: $\;$ +49(0)228/73-5874\\
                        E-Mail: stre@asta.uni-bonn.de\\
                        \\
                \end{tabular}
        \end{tabular}
} 

\fancyfoot[OR,ER]{
        \scriptsize
        \begin{tabular}{@{}l@{}}
                Bürozeiten:\\
                Di: 14:30-16:30\\
                Zimmer 8, Zimmer 5
        \end{tabular}
}

\fancyfoot[OL,EL]{
       \scriptsize
        \begin{tabular}{l}
                \begin{tabular}{@{}l@{}r}
                        Ausschuss für das Semesterticket\\
                        c/o AStA Bonn, Nassestraße 11\\
                        53113 Bonn\\
                \end{tabular}
        \end{tabular}
}

\fancypagestyle{ersteSeite}{
        \renewcommand{\headrulewidth}{0pt}
        \fancyhead{}
}

\LoadLetterOption{DIN}

\makeatletter
\@setplength{specialmailindent}{0pt}
\@setplength{sigbeforevskip}{0pt}
\setkomafont{specialmail}{\hfill\ttfamily\color{red}}
\renewcommand*{\specialmail@format}[1]{}
\let\specialmail@format
\makeatother
        \setkomavar{subject}{BETREFF}
        \setkomavar{date}{\mbox{\datum{}}}%% Datum
\begin{letter}{ANSCHRIFT}

\opening{ANREDE}

BRIEFTEXT

\end{letter}
\end{document}"""
	gs.save()

def erstelle_antragsgruende_nachweise(apps, schema_editor):
	
	# NACHWEISE #
	
	Nachweis = apps.get_model("backend", "Nachweis")
	
	n_weiterer_nachweis = Nachweis()
	n_weiterer_nachweis.name = "Weiterer Nachweis"
	n_weiterer_nachweis.beschreibung = "Erklärung oder Nachweis über Unbenutzbarkeit oder Unzumutbarkeit des ÖPNVs ODER Nachweis der kostenfreien Nutzbarkeit des ÖPNV (Kopie der Wertmarke)"
	n_weiterer_nachweis.hochzuladen = True
	n_weiterer_nachweis.sort = 0
	n_weiterer_nachweis.save()
	
	n_weitere_nachweise_fuer_die_einzelfallpruefung = Nachweis()
	n_weitere_nachweise_fuer_die_einzelfallpruefung.name = "Weitere Nachweise für die Einzelfallsprüfung"
	n_weitere_nachweise_fuer_die_einzelfallpruefung.beschreibung = ""
	n_weitere_nachweise_fuer_die_einzelfallpruefung.hochzuladen = True
	n_weitere_nachweise_fuer_die_einzelfallpruefung.sort = 0
	n_weitere_nachweise_fuer_die_einzelfallpruefung.save()
	
	n_versicherung_richtigkeit = Nachweis()
	n_versicherung_richtigkeit.name = "Versicherung über die Richtigkeit der Angaben mit Unterschrift"
	n_versicherung_richtigkeit.beschreibung = ""
	n_versicherung_richtigkeit.hochzuladen = True
	n_versicherung_richtigkeit.sort = 0
	n_versicherung_richtigkeit.save()
	
	n_kopie_personalausweis_reisepass = Nachweis()
	n_kopie_personalausweis_reisepass.name = "Personalausweis- oder Reisepasskopie"
	n_kopie_personalausweis_reisepass.beschreibung = "EU-AusländerInnen nur Reisepasskopie"
	n_kopie_personalausweis_reisepass.hochzuladen = True
	n_kopie_personalausweis_reisepass.sort = 0
	n_kopie_personalausweis_reisepass.save()
	
	n_zahlung_beitrag = Nachweis()
	n_zahlung_beitrag.name = "Nachweis über Zahlung des Semesterbeitrages"
	n_zahlung_beitrag.beschreibung = "BASIS-Ausdruck oder Kontoauszug"
	n_zahlung_beitrag.hochzuladen = True
	n_zahlung_beitrag.sort = 0
	n_zahlung_beitrag.save()
	
	n_existenz_grund = Nachweis()
	n_existenz_grund.name = "Nachweis der Existenz des Grundes"
	n_existenz_grund.beschreibung = "z.B. Sterbeurkunde, ärztliches Attest, Pflegestufenbescheinigung. Erkennbar muss des Weiteren sein, dass die Anwesenheit bei der Familie sich dringend ergab und, dass ein Verwandtschaftsverhältnis besteht. Genaue Diagnosen, Einschränkungen o.ä. dürfen geschwärzt sein."
	n_existenz_grund.hochzuladen = True
	n_existenz_grund.sort = 0
	n_existenz_grund.save()
	
	n_kopie_studausweis = Nachweis()
	n_kopie_studausweis.name = "Kopie des Studierendenausweises für das Antragssemester"
	n_kopie_studausweis.beschreibung = "beide Seiten!"
	n_kopie_studausweis.hochzuladen = True
	n_kopie_studausweis.sort = 0
	n_kopie_studausweis.save()
	
	n_kopie_schwerbehausweis = Nachweis()
	n_kopie_schwerbehausweis.name = "Kopie des Schwerbehindertenausweises"
	n_kopie_schwerbehausweis.beschreibung = "ggf. mit Beiblatt"
	n_kopie_schwerbehausweis.hochzuladen = True
	n_kopie_schwerbehausweis.sort = 0
	n_kopie_schwerbehausweis.save()
	
	n_kopie_promotionsvertrag = Nachweis()
	n_kopie_promotionsvertrag.name = "Kopie des Promotionsvertrages o.ä."
	n_kopie_promotionsvertrag.beschreibung = ""
	n_kopie_promotionsvertrag.hochzuladen = True
	n_kopie_promotionsvertrag.sort = 0
	n_kopie_promotionsvertrag.save()
	
	n_kopie_jobticket = Nachweis()
	n_kopie_jobticket.name = "Kopie des Jobtickets"
	n_kopie_jobticket.beschreibung = ""
	n_kopie_jobticket.hochzuladen = True
	n_kopie_jobticket.sort = 0
	n_kopie_jobticket.save()
	
	n_exmatrikulationsbescheinigung = Nachweis()
	n_exmatrikulationsbescheinigung.name = "Exmatrikulationsbescheinigung"
	n_exmatrikulationsbescheinigung.beschreibung = ""
	n_exmatrikulationsbescheinigung.hochzuladen = True
	n_exmatrikulationsbescheinigung.sort = 0
	n_exmatrikulationsbescheinigung.save()
	
	n_einschreibebescheinigung = Nachweis()
	n_einschreibebescheinigung.name = "Einschreibebescheinigung"
	n_einschreibebescheinigung.beschreibung = ""
	n_einschreibebescheinigung.hochzuladen = True
	n_einschreibebescheinigung.sort = 0
	n_einschreibebescheinigung.save()
	
	n_bescheinigung_vrs = Nachweis()
	n_bescheinigung_vrs.name = "Bescheinigung des VRS"
	n_bescheinigung_vrs.beschreibung = ""
	n_bescheinigung_vrs.hochzuladen = True
	n_bescheinigung_vrs.sort = 0
	n_bescheinigung_vrs.save()
	
	n_anhang_2a = Nachweis()
	n_anhang_2a.name = "Anhang 2a)"
	n_anhang_2a.beschreibung = "Erklärung über das Einkommen, Vermögen, die notwendigen Ausgaben und ggf. Schulden"
	n_anhang_2a.hochzuladen = True
	n_anhang_2a.sort = 0
	n_anhang_2a.save()
	
	n_belege_2a = Nachweis()
	n_belege_2a.name = "Belege zu 2a)"
	n_belege_2a.beschreibung = "Einkommensnachweise (Unterhalt, staatliche Zuwendungen, Arbeitseinkünfte, Stipendien), Vermögen (Kontoauszüge o.ä.), Warmmietnachweis, ggf. Krankenversicherungskosten, ggf. Kopien von Geburtsukrunden oder Passpapieren von Kindern, die im Haushalt wohnen, evt. weitere anzuerkennende Ausgabennachweise"
	n_belege_2a.hochzuladen = True
	n_belege_2a.sort = 0
	n_belege_2a.save()
	
	n_anhang_2b = Nachweis()
	n_anhang_2b.name = "Anhang 2b)"
	n_anhang_2b.beschreibung = "Universitäre Bescheinigung über Aufenthalt, seine studienbedingte Natur und den Zeitraum"
	n_anhang_2b.hochzuladen = True
	n_anhang_2b.sort = 0
	n_anhang_2b.save()
	
	n_anhang_3a = Nachweis()
	n_anhang_3a.name = "Anhang 3a)"
	n_anhang_3a.beschreibung = "Bescheinigung des/der verantwortlichen Dozent/in über die Anfertigung der Abschlussarbeit, die nicht-notwendige Anwesenheit sowie der Scheinfreiheit"
	n_anhang_3a.hochzuladen = True
	n_anhang_3a.sort = 0
	n_anhang_3a.save()
	
	n_anhang_3b = Nachweis()
	n_anhang_3b.name = "Anhang 3b)"
	n_anhang_3b.beschreibung = "Bescheinigung des/der Doktorvaters/Doktormutter über die Promotion und die nicht-notwendige Anwesenheit im Vertragsgebiet im besagten Semester"
	n_anhang_3b.hochzuladen = True
	n_anhang_3b.sort = 0
	n_anhang_3b.save()
	
	n_aktuelle_meldebescheinigung = Nachweis()
	n_aktuelle_meldebescheinigung.name = "Aktuelle Meldebescheinigung"
	n_aktuelle_meldebescheinigung.beschreibung = ""
	n_aktuelle_meldebescheinigung.hochzuladen = True
	n_aktuelle_meldebescheinigung.sort = 0
	n_aktuelle_meldebescheinigung.save()
	
	
	# ANTRAGSGRÜNDE #
	
	Antragsgrund = apps.get_model("backend", "Antragsgrund")
	
	g_exmatrikulation = Antragsgrund()
	g_exmatrikulation.identifier = "E"
	g_exmatrikulation.name = "Exmatrikulation"
	g_exmatrikulation.beschreibung = ""
	g_exmatrikulation.an_frist_gebunden = False
	g_exmatrikulation.sort = 0
	g_exmatrikulation.save()
	g_exmatrikulation.nachweise.add(n_kopie_personalausweis_reisepass)
	g_exmatrikulation.nachweise.add(n_exmatrikulationsbescheinigung)
	g_exmatrikulation.nachweise.add(n_zahlung_beitrag)
	g_exmatrikulation.save()
	
	g_exmatrikulation = Antragsgrund()
	g_exmatrikulation.identifier = "S"
	g_exmatrikulation.name = "Sozialer Härtefall"
	g_exmatrikulation.beschreibung = ""
	g_exmatrikulation.an_frist_gebunden = True
	g_exmatrikulation.sort = 0
	g_exmatrikulation.save()
	g_exmatrikulation.nachweise.add(n_kopie_studausweis)
	g_exmatrikulation.nachweise.add(n_kopie_personalausweis_reisepass)
	g_exmatrikulation.nachweise.add(n_belege_2a)
	g_exmatrikulation.nachweise.add(n_anhang_2a)
	g_exmatrikulation.save()
	
	g_exmatrikulation = Antragsgrund()
	g_exmatrikulation.identifier = "B"
	g_exmatrikulation.name = "Schwerbehinderung"
	g_exmatrikulation.beschreibung = ""
	g_exmatrikulation.an_frist_gebunden = True
	g_exmatrikulation.sort = 0
	g_exmatrikulation.save()
	g_exmatrikulation.nachweise.add(n_kopie_studausweis)
	g_exmatrikulation.nachweise.add(n_kopie_personalausweis_reisepass)
	g_exmatrikulation.nachweise.add(n_kopie_schwerbehausweis)
	g_exmatrikulation.nachweise.add(n_weiterer_nachweis)
	g_exmatrikulation.save()
	
	g_exmatrikulation = Antragsgrund()
	g_exmatrikulation.identifier = "A"
	g_exmatrikulation.name = "Studienbedingter Aufenthalt außerhalb des Vertragsgebiete"
	g_exmatrikulation.beschreibung = ""
	g_exmatrikulation.an_frist_gebunden = True
	g_exmatrikulation.sort = 0
	g_exmatrikulation.save()
	g_exmatrikulation.nachweise.add(n_kopie_studausweis)
	g_exmatrikulation.nachweise.add(n_kopie_personalausweis_reisepass)
	g_exmatrikulation.nachweise.add(n_anhang_2b)
	g_exmatrikulation.save()
	
	g_exmatrikulation = Antragsgrund()
	g_exmatrikulation.identifier = "V"
	g_exmatrikulation.name = "Verspäteter Immatrikulation/Promotionsbegin"
	g_exmatrikulation.beschreibung = ""
	g_exmatrikulation.an_frist_gebunden = True
	g_exmatrikulation.sort = 0
	g_exmatrikulation.save()
	g_exmatrikulation.nachweise.add(n_kopie_studausweis)
	g_exmatrikulation.nachweise.add(n_kopie_personalausweis_reisepass)
	g_exmatrikulation.nachweise.add(n_einschreibebescheinigung)
	g_exmatrikulation.save()
	
	g_exmatrikulation = Antragsgrund()
	g_exmatrikulation.identifier = "F"
	g_exmatrikulation.name = "Aufenthalt außerhalb Vertragsgebiet wegen dringender familiärer Gründe"
	g_exmatrikulation.beschreibung = ""
	g_exmatrikulation.an_frist_gebunden = True
	g_exmatrikulation.sort = 0
	g_exmatrikulation.save()
	g_exmatrikulation.nachweise.add(n_kopie_studausweis)
	g_exmatrikulation.nachweise.add(n_kopie_personalausweis_reisepass)
	g_exmatrikulation.nachweise.add(n_existenz_grund)
	g_exmatrikulation.save()
	
	g_exmatrikulation = Antragsgrund()
	g_exmatrikulation.identifier = "P"
	g_exmatrikulation.name = "Promotion (ohne Anwesenheit im Vertragsgebiet)"
	g_exmatrikulation.beschreibung = ""
	g_exmatrikulation.an_frist_gebunden = True
	g_exmatrikulation.sort = 0
	g_exmatrikulation.save()
	g_exmatrikulation.nachweise.add(n_kopie_studausweis)
	g_exmatrikulation.nachweise.add(n_kopie_personalausweis_reisepass)
	g_exmatrikulation.nachweise.add(n_anhang_3b)
	g_exmatrikulation.save()
	
	g_exmatrikulation = Antragsgrund()
	g_exmatrikulation.identifier = "AA"
	g_exmatrikulation.name = "Abschlussarbeit (Fertigstellung außerhalb Vertragsgebiet)"
	g_exmatrikulation.beschreibung = ""
	g_exmatrikulation.an_frist_gebunden = True
	g_exmatrikulation.sort = 0
	g_exmatrikulation.save()
	g_exmatrikulation.nachweise.add(n_kopie_studausweis)
	g_exmatrikulation.nachweise.add(n_kopie_personalausweis_reisepass)
	g_exmatrikulation.nachweise.add(n_anhang_3a)
	g_exmatrikulation.save()
	
	g_exmatrikulation = Antragsgrund()
	g_exmatrikulation.identifier = "J"
	g_exmatrikulation.name = "Jobticket"
	g_exmatrikulation.beschreibung = ""
	g_exmatrikulation.an_frist_gebunden = True
	g_exmatrikulation.sort = 0
	g_exmatrikulation.save()
	g_exmatrikulation.nachweise.add(n_kopie_studausweis)
	g_exmatrikulation.nachweise.add(n_kopie_personalausweis_reisepass)
	g_exmatrikulation.nachweise.add(n_bescheinigung_vrs)
	g_exmatrikulation.nachweise.add(n_kopie_jobticket)
	g_exmatrikulation.save()
	
	g_exmatrikulation = Antragsgrund()
	g_exmatrikulation.identifier = "W"
	g_exmatrikulation.name = "Weitere Gründe"
	g_exmatrikulation.beschreibung = ""
	g_exmatrikulation.an_frist_gebunden = True
	g_exmatrikulation.sort = 0
	g_exmatrikulation.save()
	g_exmatrikulation.nachweise.add(n_kopie_studausweis)
	g_exmatrikulation.nachweise.add(n_kopie_personalausweis_reisepass)
	g_exmatrikulation.nachweise.add(n_weitere_nachweise_fuer_die_einzelfallpruefung)
	g_exmatrikulation.save()

def erstelle_begruendungen(apps, schema_editor):
	
	Begruendung = apps.get_model("backend", "Begruendung")
	
	b_antragsfrist_nicht_eingehalten = Begruendung()
	b_antragsfrist_nicht_eingehalten.name = "10. November/10. Mai-Frist nicht eingehalten"
	b_antragsfrist_nicht_eingehalten.text = r"Die Antragsfrist  für Anträge zu Wintersemestern endet mit dem 10. November des jeweiligen Jahres, für Anträge zu Sommersemestern mit dem 10. Mai des jeweiligen Jahres (§ 3 Abs. 5 Satz 11 RLST). Anträge, welche nicht fristgerecht eingegangen sind, müssen abgelehnt werden (§ 8 Abs. 3 RLST).\\ Dein Antrag ging erst am ANTRAGSDATUM bei uns ein und muss daher abgelehnt werden."
	b_antragsfrist_nicht_eingehalten.sort = 110
	b_antragsfrist_nicht_eingehalten.save()
	
	b_exmatrikulationsfrist_nicht_eingehalten = Begruendung()
	b_exmatrikulationsfrist_nicht_eingehalten.name = "Frist nach Exmatrikulation nicht eingehalten"
	b_exmatrikulationsfrist_nicht_eingehalten.text = r"Die Antragsfrist für Anträge aufgrund einer Exmatrikulation endet vier Wochen nach der Exmatrikulation (§ 3 Abs. 5 RLST). Anträge, welche nicht fristgerecht eingegangen sind, müssen abgelehnt werden (§ 8 Abs. 3 RLST).\\ Dein Antrag ging erst am ANTRAGSDATUM bei uns ein und muss daher abgelehnt werden."
	b_exmatrikulationsfrist_nicht_eingehalten.sort = 120
	b_exmatrikulationsfrist_nicht_eingehalten.save()

	b_unterlagen_nicht_nachgereicht = Begruendung()
	b_unterlagen_nicht_nachgereicht.name = "Unterlagen nicht nachgereicht"
	b_unterlagen_nicht_nachgereicht.text = r"Der Antrag wurde gestellt, ohne dass bereits sämtliche erforderlichen Unterlagen und Angaben enthalten waren.\\ Daraufhin wurde gemäß § 3 Abs. 6 Satz 1 RLST mit Schreiben vom NACHFRIST1-BRIEFDATUM eine Nachbesserungsfrist bis zum NACHFRIST1-DATUM gesetzt. Mit Schreiben vom NACHFRIST2-BRIEFDATUM wurde eine weitere Nachbesserungsfrist bis zum NACHFRIST2-DATUM gesetzt.\\ Bis zum Fristablauf wurden nicht alle benötigten Unterlagen eingereicht. Der Antrag ist daher gemäß § 8 Abs. 3 RLST abzulehnen."
	b_unterlagen_nicht_nachgereicht.sort = 130
	b_unterlagen_nicht_nachgereicht.save()
	
	b_kein_sozialer_haertefall = Begruendung()
	b_kein_sozialer_haertefall.name = "Sozialer Härtefall liegt nicht vor"
	b_kein_sozialer_haertefall.text = r"Ein Antrag aufgrund sozialen Härtefalls ist begründet, wenn von dem monatlichen Einkommen nach Abzug der Miet- und Krankenversicherungskosten etc. ein Betrag von \EUR{325,00} oder weniger verbleibt (Bemessungsgrenze nach § 4 Abs. 6 RLST). Dabei sind maximal \EUR{345,00} Warmmietkosten anrechenbar. Dies ist bei Deinem Antrag nicht der Fall."
	b_kein_sozialer_haertefall.sort = 140
	b_kein_sozialer_haertefall.save()
	
def erstelle_gruppen_admin(apps, schema_editor):
	
	gruppe_antragstellung, created = Group.objects.get_or_create(name='Antragstellung')
	gruppe_bearbeitung, created = Group.objects.get_or_create(name='Bearbeitung')
	
	
	admin = User.objects.create_user('admin', None, 'Zeitungsartikel')
	admin.is_staff = True
	admin.is_superuser = True
	admin.save()
	
	gruppe_bearbeitung.user_set.add(admin)

class Migration(migrations.Migration):

	dependencies = [
		('backend', '0001_initial'),
	]

	operations = [
		migrations.RunPython(erstelle_statusse_briefvorlagen_aktionen_uebergaenge),
		migrations.RunPython(erstelle_antragsgruende_nachweise),
		migrations.RunPython(erstelle_begruendungen),
		migrations.RunPython(erstelle_gruppen_admin),
		
	]
